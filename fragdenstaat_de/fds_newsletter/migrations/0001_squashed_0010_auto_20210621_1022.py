# Generated by Django 3.1.8 on 2021-06-21 08:38

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import fragdenstaat_de.fds_newsletter.models
import taggit.managers


class Migration(migrations.Migration):
    replaces = [
        ("fds_newsletter", "0001_initial"),
        ("fds_newsletter", "0002_submission"),
        ("fds_newsletter", "0003_mailing"),
        ("fds_newsletter", "0004_auto_20191030_1601"),
        ("fds_newsletter", "0005_auto_20200203_1728"),
        ("fds_newsletter", "0006_auto_20200203_1732"),
        ("fds_newsletter", "0007_auto_20200203_1744"),
        ("fds_newsletter", "0008_auto_20210526_2155"),
        ("fds_newsletter", "0009_auto_20210526_2203"),
        ("fds_newsletter", "0010_auto_20210621_1022"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Newsletter",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="newsletter title"),
                ),
                ("slug", models.SlugField(unique=True)),
                ("url", models.URLField(blank=True)),
                (
                    "sender_email",
                    models.EmailField(
                        help_text="Sender e-mail", max_length=254, verbose_name="e-mail"
                    ),
                ),
                (
                    "sender_name",
                    models.CharField(
                        help_text="Sender name", max_length=200, verbose_name="sender"
                    ),
                ),
                ("visible", models.BooleanField(default=True, verbose_name="visible")),
            ],
            options={
                "verbose_name": "newsletter",
                "verbose_name_plural": "newsletters",
            },
        ),
        migrations.CreateModel(
            name="Subscriber",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=100, verbose_name="name"),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        db_index=True,
                        max_length=254,
                        null=True,
                        verbose_name="e-mail",
                    ),
                ),
                ("send_html", models.BooleanField(default=True)),
                (
                    "created",
                    models.DateTimeField(
                        default=django.utils.timezone.now, editable=False
                    ),
                ),
                ("last_activation_sent", models.DateTimeField(blank=True, null=True)),
                (
                    "activation_code",
                    models.CharField(
                        default=fragdenstaat_de.fds_newsletter.models.make_activation_code,
                        max_length=40,
                        verbose_name="activation code",
                    ),
                ),
                (
                    "subscribed",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="subscribe date"
                    ),
                ),
                (
                    "unsubscribed",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="unsubscribe date"
                    ),
                ),
                ("unsubscribe_method", models.CharField(blank=True, max_length=255)),
                ("email_hash", models.CharField(blank=True, max_length=64)),
                ("reference", models.CharField(blank=True, max_length=255)),
                ("keyword", models.CharField(blank=True, max_length=255)),
                (
                    "newsletter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="fds_newsletter.newsletter",
                        verbose_name="newsletter",
                    ),
                ),
            ],
            options={
                "verbose_name": "newsletter subscriber",
                "verbose_name_plural": "newsletter subscribers",
                "ordering": ("-created",),
            },
        ),
        migrations.CreateModel(
            name="SubscriberTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                (
                    "slug",
                    models.SlugField(max_length=100, unique=True, verbose_name="slug"),
                ),
            ],
            options={
                "verbose_name": "Subscriber Tag",
                "verbose_name_plural": "Subscriber Tags",
            },
        ),
        migrations.CreateModel(
            name="TaggedSubscriber",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="fds_newsletter.subscriber",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscribers",
                        to="fds_newsletter.subscribertag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tagged Subscriber",
                "verbose_name_plural": "Tagged Subscribers",
            },
        ),
        migrations.AddField(
            model_name="subscriber",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="fds_newsletter.TaggedSubscriber",
                to="fds_newsletter.SubscriberTag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="subscriber",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="user",
            ),
        ),
        migrations.AddConstraint(
            model_name="subscriber",
            constraint=models.UniqueConstraint(
                condition=models.Q(user__isnull=False),
                fields=("newsletter", "user"),
                name="unique_user_newsletter",
            ),
        ),
        migrations.AddConstraint(
            model_name="subscriber",
            constraint=models.UniqueConstraint(
                condition=models.Q(email__isnull=False),
                fields=("newsletter", "email"),
                name="unique_email_newsletter",
            ),
        ),
        migrations.AddConstraint(
            model_name="subscriber",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("subscribed__isnull", False),
                    ("unsubscribed__isnull", False),
                    _negated=True,
                ),
                name="newsletter_subscription_state",
            ),
        ),
        migrations.AddConstraint(
            model_name="subscriber",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("email__isnull", False), ("user__isnull", True)),
                    models.Q(("email__isnull", True), ("user__isnull", False)),
                    models.Q(
                        ("email__isnull", True),
                        ("unsubscribed__isnull", False),
                        ("user__isnull", True),
                    ),
                    _connector="OR",
                ),
                name="newsletter_subscription_user_email",
            ),
        ),
    ]
